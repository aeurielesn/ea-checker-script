//===== eAthena Script =======================================
//= Checker Game
//===== By: ==================================================
//= Xyphen
//= pakpil
//===== Current Version: =====================================
//= 2.0
//===== Compatible With: =====================================
//= eAthena SVN 10580+
//===== Description: =========================================
//= Amusing Checker Game
//===== Additional Comments: =================================
//= These ones are the game control functions. These will
//= control game procces, like pieces movements,
//= Checker transfer, etc.
//============================================================ 

/**
* Checks the end of the game.
* return - 1 for end of game, 0 otherwise
*/
function	script	F_EndOfGame	{
	set .@endgame, 1;
	if($@CheckTurn==1){
		for( set .@i, 1; (.@i <= 12) && (.@endgame == 1); set .@i, .@i + 1 ){
			set .@posible, 0;
			set .@piece, $@cboard[callfunc("F_BoardPos", $@xPiece[.@i], $@yPiece[.@i])];
			set .@type, callfunc("F_PieceType",.@piece); 
			if(.@type==1) set .@posible, callfunc("F_Possibles",$@xPiece[.@i],$@yPiece[.@i],1,1);
			else if(.@type==2) set .@posible, callfunc("F_Possibles2",$@xPiece[.@i],$@yPiece[.@i],1);
			if(.@posible) set .@endgame, 0;
			}
	} else if($@CheckTurn==2){
		for( set .@i, 13; (.@i <= 24) && (.@endgame == 1); set .@i, .@i + 1 ){
			set .@posible, 0;
			set .@piece, $@cboard[callfunc("F_BoardPos", $@xPiece[.@i], $@yPiece[.@i])];
			set .@type, callfunc("F_PieceType",.@piece); 
			if(.@type==1) set .@posible, callfunc("F_Possibles",$@xPiece[.@i],$@yPiece[.@i],-1,2);
			else if(.@type==2) set .@posible, callfunc("F_Possibles2",$@xPiece[.@i],$@yPiece[.@i],2);
			if(.@posible) set .@endgame, 0;
			}
		}
	return .@endgame;
	}

/**
* Retrieve the absolute position given the relative position.
* args - relative position
* return - absolute position
*/
function	script	F_AbsolutePos	{
	return (getarg(0)*3)+9;
	}

/**
* Retrieve the relative position given the absolute position.
* args - absolute position
* return - relative position
*/
function	script	F_RelativePos	{
	return (getarg(0)-9)/3;
	}

/**
* Retrieve the board vectorial position given the
* matriz position of a specific cell.
* args - matrixial coordinates x and y
* return - a number between 0...63 that represents the
*	position in the vectorial form
*/
function	script	F_BoardPos	{
	return getarg(0)+(8*getarg(1));
	}

/**
* Retrieve the type of a specific piece.
* args - value of the piece
* return - 1 for a poring, 2 for and angeling, 0 otherwise.
*/
function	script	F_PieceType	{
	if((getarg(0)>=1) || (getarg(0)<=24)) return 1;
	else if((getarg(0)>=25) || (getarg(0)<=48)) return 2;
	else return 0;
	}

/**
* Retrieve the player that owns a specific piece.
* args - value of the piece
* return - 1 or 2 for the player, 0 for empty.
*/
function	script	F_Player	{
	if(!getarg(0)) return 0;
	if(callfunc("F_PieceType",getarg(0))==1) return (getarg(0)/13)+1;
	else return ((getarg(0)-24)/13)+1;
	}

/**
* Retrieve the value of the piece, the player or the type of the piece
* in a specific relative position of the board.
* args - x-coordinate, y-coordinate and result-type
* return - value of the cell for result-type 0,
* 	player owner for result-type 1,
*	piece's type for result-type 2.
*/
function	script	F_BoardChecker	{
	if((getarg(0) < 0) || (getarg(0) > 7)) return -1;
	if((getarg(1) < 0) || (getarg(1) > 7)) return -1;
	set .@result, $@cboard[callfunc("F_BoardPos",getarg(0),getarg(1))];
	if(getarg(2)==0) return .@result;
	else if(getarg(2)==1) return callfunc("F_Player",.@result);
	else if(getarg(2)==2) return callfunc("F_PieceType",.@result);
	}

/**
* Loads the ghost pieces for the piece's movement.
*/
function	script	F_GhostLoader	{
	if(!callfunc("F_BoardChecker",getarg(0),getarg(1),1)){
		set $@nGhost, $@nGhost + 1;
		movenpc "Poporing#" + $@nGhost,callfunc("F_AbsolutePos",getarg(0)),callfunc("F_AbsolutePos",getarg(1));
		enablenpc "Poporing#" + $@nGhost;
		}
	return;
	}

/**
* Take a piece of the oponent given the move of the attacker
* args - final x-relative, final y-relative, 
*	current x-relative, current y-relative
*/
function	script	F_TakePiece	{
	if(getarg(0) > getarg(2)) set .@todelx, getarg(0)-1;
	else set .@todelx, getarg(0)+1;

	if(getarg(1) > getarg(3)) set .@todely, getarg(1)-1;
	else set .@todely, getarg(1)+1;
                        
	set .@todelp, callfunc("F_BoardChecker", .@todelx, .@todely, 0);
	if(callfunc("F_PieceType", .@todelp)==1) disablenpc "Poring#" + .@todelp;
	else disablenpc "Angeling#" + ((.@todelp%25)+1);

	set $@cboard[callfunc("F_BoardPos", .@todelx, .@todely)], 0;
	set $@rPieces[callfunc("F_Player",.@todelp)], $@rPieces[callfunc("F_Player",.@todelp)] - 1;

	// TODO: Comprobacion de final de juego
	// El jugador toma todas las fichas del oponente
	if($@rPieces[callfunc("F_Player",.@todelp)]==0) dispbottom "Victoria del jugador actual.";
	
	return;
	}

/**
* Change a normal piece to a checker piece.
* args - piece id
*/
function	script	F_ChangeType	{
	if((getarg(0) < 0) || (getarg(0)>24)) return -1;
	disablenpc "Poring#" + getarg(0);
	movenpc "Angeling#" + getarg(0), callfunc("F_AbsolutePos",$@xPiece[getarg(0)]),callfunc("F_AbsolutePos",$@yPiece[getarg(0)]);
	enablenpc "Angeling#" + getarg(0);
	set $@cboard[callfunc("F_BoardPos",$@xPiece[getarg(0)],$@yPiece[getarg(0)])], 24 + getarg(0);
	return;
	}

/**
* Checks for the position selected to move a specific piece.
* args - piece id
*/
function	script	F_GhostUnloader	{
	if(select("Mover","No mover")==1){
		getmapxy( .@map$, .@lastx, .@lasty, 1 ,"Poporing#"+getarg(0));
		for( set .@i, 1; .@i <= $@nGhost; set .@i, .@i + 1 ) disablenpc "Poporing#" + .@i;
		set $@nGhost, 0;

		if(callfunc("F_PieceType",$@MovePiece)==2) set .@piece, ($@MovePiece%25)+1;
		else set .@piece, $@MovePiece;

		set .@pos, callfunc("F_BoardPos",$@xPiece[.@piece],$@yPiece[.@piece]);
		set $@cboard[.@pos], 0;

		if($@TakePiece) callfunc "F_TakePiece",callfunc("F_RelativePos", .@lastx),callfunc("F_RelativePos", .@lasty),$@xPiece[.@piece],$@yPiece[.@piece];

		set $@xPiece[.@piece], callfunc("F_RelativePos", .@lastx);
		set $@yPiece[.@piece], callfunc("F_RelativePos", .@lasty);

		set .@pos, callfunc("F_BoardPos",$@xPiece[.@piece],$@yPiece[.@piece]);
		set $@cboard[.@pos], $@MovePiece;

		if(callfunc("F_PieceType",$@MovePiece)==1) movenpc "Poring#" + .@piece, .@lastx, .@lasty;
		else movenpc "Angeling#" + .@piece, .@lastx, .@lasty;

		// TODO: Comprobacion de coronar una ficha
		if(callfunc("F_PieceType",$@MovePiece)==1){
			if((callfunc("F_Player",$@MovePiece)==2) && ($@yPiece[.@piece]==0)) callfunc("F_ChangeType",$@MovePiece);
			if((callfunc("F_Player",$@MovePiece)==1) && ($@yPiece[.@piece]==7)) callfunc("F_ChangeType",$@MovePiece);
			}

		if($@TakePiece){
			if(callfunc("F_PieceType",$@MovePiece)==1){
				// FIXME: callfunc("F_Player",$@MovePiece) can be omitible
				if(callfunc("F_Player",$@MovePiece)==1) set .@posible, callfunc("F_Possibles",$@xPiece[.@piece],$@yPiece[.@piece],1,callfunc("F_Player",$@MovePiece));
				else set .@posible, callfunc("F_Possibles",$@xPiece[.@piece],$@yPiece[.@piece],-1,callfunc("F_Player",$@MovePiece));
				
				if(.@posible&10){ 
					if(callfunc("F_Player",$@MovePiece)==1) callfunc "F_MoveChecker",$@MovePiece,1,1;
					else callfunc "F_MoveChecker",.@piece,-1,1;
				} else { 
					set $@TakePiece, 0;
					}
			} else {
				set .@posible, callfunc("F_Possibles2",$@xPiece[.@piece],$@yPiece[.@piece],callfunc("F_Player",$@MovePiece));

				if(.@posible&170){ 
					callfunc "F_MoveChecker2",.@piece,1;
				} else { 
					set $@TakePiece, 0;
					}
				}
			}

		if(!($@TakePiece)) {
			set $@MovePiece, 0;
			set $@CheckTurn, 3 - $@CheckTurn;

			//TODO: end of game
			if(callfunc("F_EndOfGame")==1) dispbottom "End of Game.";

			}
		close;
		}
	else close;

	return;
	}

/**
* Retrieve a bitwise variable with the possibles of a specific piece given
* the relative coordinates.
* args - x-relative, y-relative, direction (+1: north, -1:south), player moving
* return - an integer
*/
// .@posible
// .........
// .2.....8.
// ..*...*..
// ...1.4...
// ....P....
// .........
function	script	F_Possibles	{
	set .@posible,0;
	set .@player,getarg(3);
	set .@izq, callfunc("F_BoardChecker",getarg(0)-1,getarg(1)+getarg(2),1);
	set .@der, callfunc("F_BoardChecker",getarg(0)+1,getarg(1)+getarg(2),1);
 
	if(!(.@izq)) set .@posible, .@posible|1;

	if((.@izq > 0) && (.@izq != .@player))
		if(!callfunc("F_BoardChecker",getarg(0)-2,getarg(1)+2*getarg(2),1))
			set .@posible, .@posible|2;

	if(!(.@der)) set .@posible, .@posible|4;

	if((.@der > 0) && (.@der != .@player))
		if(!callfunc("F_BoardChecker",getarg(0)+2,getarg(1)+2*getarg(2),1))
			set .@posible, .@posible|8;

	return .@posible;
	}

/**
* Function to move a normal piece
* args - piece id, direction (+1:north,-1:south), display menu (0:si, 1:no)
*/
function	script	F_MoveChecker	{
	set .@x,$@xPiece[getarg(0)];
	set .@y,$@yPiece[getarg(0)];
	set .@posible, callfunc("F_Possibles",.@x,.@y,getarg(1),callfunc("F_Player",getarg(0)));

	if(($@MovePiece && !(getarg(2))) || !(.@posible)) return;

	if(!getarg(2)) set .@choose,select("Mover","No mover");
	else set .@choose, 1;

	if(.@choose==1){
		set $@MovePiece,getarg(0);
		if((.@posible&1) && !(.@posible&10)) callfunc "F_GhostLoader",.@x-1,.@y+getarg(1);
		if((.@posible&4) && !(.@posible&10)) callfunc "F_GhostLoader",.@x+1,.@y+getarg(1);
		if(.@posible&2) { callfunc "F_GhostLoader",.@x-2,.@y+(2*getarg(1)); set $@TakePiece,1; }
		if(.@posible&8) { callfunc "F_GhostLoader",.@x+2,.@y+(2*getarg(1)); set $@TakePiece,1; }
		if(!getarg(2)) close;
		}
	else close;
		
	return;
	}

/**
* Retrieve a bitwise variable with the possibles of a specific piece checker given
* the relative coordinates.
* args - x-relative, y-relative, player moving
* return - an integer
*/
// ........................
// ......2.....8...........
// .......*...*............
// ........1.4.............
// .........A..............
// .......16.64............
// .......*...*............
// .....32.....128.........
// ........................
function	script	F_Possibles2	{
	set .@posible, 0;

	for(set .@i, 1; callfunc("F_BoardChecker",getarg(0) - .@i,getarg(1) + .@i,1)==0 ;set .@i, .@i + 1)
		set .@posible, .@posible|1;

	set .@posible, .@posible|(callfunc("F_Possibles",getarg(0) - .@i + 1, getarg(1) + .@i - 1, 1,getarg(2))&2);

	for(set .@i, 1; callfunc("F_BoardChecker",getarg(0) + .@i,getarg(1) + .@i,1)==0 ;set .@i, .@i + 1)
		set .@posible, .@posible|4;

	set .@posible, .@posible|(callfunc("F_Possibles",getarg(0) + .@i - 1, getarg(1) + .@i - 1, 1,getarg(2))&8);

	for(set .@i, 1; callfunc("F_BoardChecker",getarg(0) - .@i,getarg(1) - .@i,1)==0 ;set .@i, .@i + 1)
        	set .@posible, .@posible|16;
	
	set .@posible, .@posible|((callfunc("F_Possibles",getarg(0) - .@i + 1,getarg(1) - .@i + 1, -1,getarg(2))&2) << 4);

	for(set .@i, 1; callfunc("F_BoardChecker",getarg(0) + .@i,getarg(1) - .@i,1)==0 ;set .@i, .@i + 1)
		set .@posible, .@posible|64;

	set .@posible, .@posible|((callfunc("F_Possibles",getarg(0) + .@i - 1,getarg(1) - .@i + 1, -1,getarg(2))&8) << 4);

	return .@posible;
	}

/**
* Function to move a checker piece
* args - piece id, display menu (0:si, 1:no)
*/
function	script	F_MoveChecker2	{
	set .@x, $@xPiece[getarg(0)];
	set .@y, $@yPiece[getarg(0)];
	set .@posible, callfunc("F_Possibles2",.@x,.@y,callfunc("F_Player",getarg(0)));

	if(( $@MovePiece && !(getarg(1)) ) || ( .@posible == 0 )) return;

	if(!getarg(1)) set .@choose, select("Mover","No mover");
	else set .@choose,1;
   
	if(.@choose){
		set $@MovePiece, 24 + getarg(0);

		for(set .@i, 1; callfunc("F_BoardChecker",.@x - .@i,.@y + .@i,1)==0 ;set .@i, .@i + 1)
			if((.@posible&1) && !(.@posible&170)) callfunc "F_GhostLoader",.@x - .@i,.@y + .@i;
		
		if(.@posible&2) { callfunc "F_GhostLoader",.@x - .@i - 1,.@y + .@i + 1; set $@TakePiece,1; }

		for(set .@i, 1; callfunc("F_BoardChecker",.@x + .@i,.@y + .@i,1)==0 ;set .@i, .@i + 1)
			if((.@posible&4) && !(.@posible&170)) callfunc "F_GhostLoader",.@x + .@i,.@y + .@i;

		if(.@posible&8) { callfunc "F_GhostLoader",.@x + .@i + 1,.@y + .@i + 1; set $@TakePiece,1; }

		for(set .@i, 1; callfunc("F_BoardChecker",.@x - .@i,.@y - .@i,1)==0 ;set .@i, .@i + 1)
			if((.@posible&16) && !(.@posible&170)) callfunc "F_GhostLoader",.@x - .@i,.@y - .@i;

		if(.@posible&32) { callfunc "F_GhostLoader",.@x - .@i - 1,.@y - .@i - 1; set $@TakePiece,1; }

		for(set .@i, 1; callfunc("F_BoardChecker",.@x + .@i,.@y - .@i,1)==0 ;set .@i, .@i + 1)
			if((.@posible&64) && !(.@posible&170)) callfunc "F_GhostLoader",.@x + .@i,.@y - .@i;

		if(.@posible&128) { callfunc "F_GhostLoader",.@x + .@i + 1,.@y - .@i - 1; set $@TakePiece,1; }

		if(!getarg(1)) close;
		}
	else close;

	return;
	}

/**
* Checks if the given player is the current player to move.
* args - char id, piece to move
* return - yes or no.
*/
function	script	F_CheckTurn	{
	if((getarg(0)==$@WPlayer) && (getarg(1)==1)){
		if($@CheckTurn==1) return 1;
		else dispbottom "Es el turno de las negras";
	} else if((getarg(0)==$@BPlayer) && (getarg(1)==2)){
		if($@CheckTurn==2) return 1;
		else dispbottom "Es el turno de las blancas";
	} else {
		dispbottom "No tienes permiso para mover esta ficha.";
		}
	return 0;
}
